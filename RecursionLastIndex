package Recursion;

import java.util.ArrayList;
import java.util.List;

public class RecursionLastIndex {

    public static int lastIndex(int input[], int x){
        return lastIndex(input, x, 0);
    }

    public static int lastIndex(int input[], int x, int startIndex) {

//      ------------ 1st Way ----------------
//        List<Integer> list = new ArrayList<>();
//        for (int i = input.length-1; i>=0;i--){
//            list.add(input[i]);
//        }
//
//        int ans = 0;
//        for (int j=0;j<list.size();j++){
//            if (list.get(j)==x){
//                ans = j;
//            }
//        }
//        return input.length -1 - ans;

//      ------------ 2nd Way ----------------

//        if(startIndex>input.length){
//              return -1;
//          }

//        int newInput[] = new int[input.length];
//        for(int i=0;i<input.length;i++){
//            newInput[i]=input[input.length-1-i];
//        }
//
//        if (newInput[startIndex]==x){
//            return input.length -1 -startIndex;
//        }
//
//        return lastIndex(input,x, startIndex+1);

//     ------------ 3rd Way ----------------

        int count = -1;

        for (int i=0;i<input.length;i++){
            if (input[i]==x){
                count = i;
            }
        }
        return count;
    

        //     ------------ 4th Way ----------------

//        int count = -1;
//
//        if (startIndex>=input.length){
//            return -1;
//        }
//
//        if (input[startIndex]==x){
//            count = startIndex;
//        }
//
//        int smallAns = lastIndex(input, x, startIndex+1);
//
//        if (count>smallAns){
//            return count;
//        }
//        else
//            return smallAns;
    }

}
